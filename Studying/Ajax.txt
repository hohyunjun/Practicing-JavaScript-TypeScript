Asynchronous JavaScript and XML
브라우저에서 페이지를 이동하지 않고 자바스크립트를 통해
HTTP Request를 보내고 그 응답을 받아 처리할 수 있는 기술
사용자에게 더 나은 사용 경험 제공
최근 대부분의 웹사이트에서 사용됨
1. 변수에 새로운 XMLHttpRequest 객체를 할당한다.
2. var.open("method", "파일경로")
3. var.send()

var.response로 해당 내용을 접근할 수 있다.
단, 비동기 방식의 요청이므로 send메소드 호출 후 바로 코드에서 접근하면 데이터가 비어 있다.
AJAX의 진행에 따라 호출되는 callback함수를 활용해야 한다.

var.readyState를 통해 현재 state를 알 수 있다.
open 메소드 호출 전 : 0
open 메소드 호출 후 : 1
보낸 요청에 대해 응답 헤더가 수신된 후 : 2
응답 메시지에 바디 부분이 수신중일 때 : 3
모든 응답이 완료되었을 때 : 4

var.status로 response code를 볼 수 있다.
200 OK
404 Not Found
500 Internal Error

응답을 정상적으로 수신한 경우,
readyState 는 4, status는 200이다.
따라서 이에 대한 EventHandler를 등록해서 코드에서의 접근이 가능하도록 할 수 있다.
    <script>
        var req = new XMLHttpRequest();
        req.onreadystatechange = function a(){ // ready state가 변할 때마다
            console.log(this.readyState, this.status);
            if(this.readyState == 4 && this.status == 200){ // 정상적으로 모두 수신이 된 경우
                console.log(this.response);
            }
        }
        req.open("GET", "http://google.com/");
        req.send();
    </script>
onreadystatechange 속성에다가 함수를 등록해 두면,
state가 변화할 때마다 지정된 함수가 실행된다.

callback function 활용 가능한 속성
 - onloadstart
 - onprogress
 - onabort
 - onerror
 - onloadstart
 - ontimeout
 - onloadend

